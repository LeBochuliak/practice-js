{"version":3,"file":"lesson-3.js","sources":["../src/js/lesson-3.js"],"sourcesContent":["// Дано масив чисел [1, 2, 3, 4, 5]. Створіть новий масив, що містить \n// квадрати кожного елементу вхідного масиву. \n// Очікуваний результат: [1, 4, 9, 16, 25].\n\nconst numbers = [1, 2, 3, 4, 5]\n\nconst squareArray = array => array.map(el => el ** 2);\n\nconsole.log(squareArray(numbers));\n\n\n// Дано масив об'єктів. Створіть новий масив, що містить всі значення \n// з масивів values кожного об'єкту, збережених в одному масиві. \n// Очікуваний результат: [1, 2, 3, 4, 5, 6, 7, 8, 9].\n\nconst data = [\n { id: 1, values: [1, 2, 3] },\n { id: 2, values: [4, 5, 6] },\n { id: 3, values: [7, 8, 9] },\n];\n\nconst concatArray = array => array.flatMap(el => el.values);\n\nconsole.log(concatArray(data));\n\n// Дано масив об'єктів. \n// Перевірте, чи є хоча б один об'єкт з віком менше 20 років. \n// Очікуваний результат: true.\n\nconst people = [\n { name: 'John', age: 27 },\n { name: 'Jane', age: 31 },\n { name: 'Bob', age: 19 },\n];\n\nconst hasUnder18 = array => array.some(el => el.age < 18);\n\nconsole.log(hasUnder18(people));\n\n\n// Дано масив чисел [2, 4, 6, 8, 10]. \n// Перевірте, чи є кожен елемент масиву парним. Очікуваний результат: true.\n\nconst numbersSecond = [2, 4, 6, 8, 10];\n\nconst evenNumbers = array => array.every(el => el % 2 === 0);\n\nconsole.log(evenNumbers(numbersSecond));\n\n\n// Знайдіть перше непарне число\n\nconst numbersThird = [2, 1, 6, 8, 9, 10, 12];\n\nconst oddNumber = array => array.find(el => el % 2 !== 0);\n\nconsole.log(oddNumber(numbersThird));\n\n\n// Відсортуйте масив чисел [4, 2, 5, 1, 3] \n// у порядку зростання. Очікуваний результат: [1, 2, 3, 4, 5].\n\nconst numbersArray = [4, 2, 5, 1, 3];\n\nconst sortedFoo = array => array.toSorted((a, b) => a - b);\n\nconsole.log(sortedFoo(numbersArray));\n\n\n// Відсортуйте масив рядків [\"banana\", \"orange\", \"apple\", \"pear\"]\n//  у порядку алфавіту. \n// Очікуваний результат: [\"apple\", \"banana\", \"orange\", \"pear\"].\n\nconst stringArray = ['banana', 'orange', 'apple', 'pear'];\n\nconst sortedStringFoo = array => array.toSorted((a, b) => a.localeCompare(b));\n\nconsole.log(sortedStringFoo(stringArray));\n\n\n//  Відсортуйте масив об'єктів за віком у порядку зростання. \n// Очікуваний результат: [{name: \"Bob\", age: 19}, {name: \"John\", age: 27}, {name: \"Jane\", age: 31}].\n\nconst users = [\n { name: 'John', age: 27 },\n { name: 'Jane', age: 31 },\n { name: 'Bob', age: 19 },\n];\n\nconst sortedObjFoo = array => array.toSorted((a, b) => a.age - b.age);\n\nconsole.log(sortedObjFoo(users));\n\n// Дано масив об'єктів. \n// Створіть новий масив, що містить тільки об'єкти, в яких \n// вік більше 20 років. \n// Очікуваний результат: [{name: \"John\", age: 27}, {name: \"Jane\", age: 31}]\n\nconst adultArray = array => array.filter(el => el.age > 20);\n\nconsole.log(adultArray(users));\n\n\n\n// Дано масив чисел [1, 2, 3, 4, 5]. \n// Застосуйте метод для обчислення суми елементів масиву.\n\nconst numbersForth = [1, 2, 3, 4, 5];\n\nconst sumFoo = array => array.reduce((el, acc) => acc += el, 0);\n\nconsole.log(sumFoo(numbersForth));\n\n\n // Розроби клас Calculator, який дозволяє виконувати арифметичні \n //  операції над числом за допомогою методів класу, підтримуючи  \n // ланцюжковий виклик (method chaining).\n //\n // Вимоги до класу Calculator\n // - Метод number(value)\n // Встановлює початкове значення для наступних обчислень.\n // Повертає сам об'єкт (this) для підтримки ланцюжкових викликів.\n \n // - метод getResult, Повертає поточний результат усіх операцій.\n // Не змінює значення, просто повертає його.\n \n // - метод add - Додає value до поточного значення.\n // Повертає сам об'єкт (this) для підтримки ланцюжкових викликів.\n \n // - метод substruct - Віднімає value від поточного значення. Повертає this.\n \n// - метод divide - Ділить поточне значення на value, якщо value не дорівнює 0.\n// Якщо value === 0, викидає помилку з повідомленням про неможливість ділення.\n// Повертає сам об'єкт (this) для підтримки ланцюжкових викликів.\n \n // - метод multiply -Множить поточне значення на value. Повертає this.\n \n // Об'єкт класу може проводити послідовні операції у вигляді ланцюжка\n \n // Приклад використання:\n\nclass Calculator {\n    constructor(value){\n        this.value = value;\n    }\n\n    number(value) {\n        this.value = value;\n        return this;\n    }\n    getResult() {\n        return this.value;\n    }\n    add(value) {\n        this.value += value;\n        return this;\n    }\n    subtract(value) {\n        this.value -= value;\n        return this;\n    }\n    divide(value) {\n        if (value === 0) {throw new Error('На 0 ділити не можна!')}\n        this.value /= value;\n        return this;\n    }\n    multiply(value) {\n        this.value *= value;\n        return this;\n    }\n\n} \n\nconst calc = new Calculator();\n\nconst result = calc\n   .number(10)   // Встановлюємо початкове значення 10\n   .add(5)       // Додаємо 5 (10 + 5 = 15)\n   .subtract(3)  // Віднімаємо 3 (15 - 3 = 12)\n   .multiply(4)  // Множимо на 4 (12 * 4 = 48)\n   .divide(2)    // Ділимо на 2 (48 / 2 = 24)\n   .getResult(); // Отримуємо результат: 24\n\n\n   console.log(result); // 24\n\n\n\n\n// Завдання 12:\n // Напиши клас Client який створює об'єкт з властивостями login email.\n // Оголоси приватні властивості #login #email, доступ до яких зроби \n // через геттер та сеттер login email\n\nclass Client {\n    #login;\n    #email;\n\n    constructor(login, email) {\n        this.#login = login;\n        this.#email = email;\n    }\n    get login() {\n    return this.#login;\n    }\n\n    set login(newLogin) {\n    this.#login = newLogin;\n    return this.#login;\n    }\n    \n\n    get email() {\n        return this.#email;\n    }\n\n    set email(newEmail) {\n        this.#email = newEmail;\n        return this.#email;\n    }\n};\n\n   //  Наслідування у класах!\n  // Cтворіть клас `Person`, який містить наступні властивості:\n  //  - `name` - ім'я людини;\n  //  - `age`- вік людини;\n  //  - `gender` - стать людини;\n  //  - `email`- електронна пошта людини.\n  \n  // Крім того, клас `Person` має мати метод `getDetails()`,\n  // який повертає об'єкт з ім'ям, віком, статтю \n  //та електронною поштою людини.\n  \n  class Person extends Client {\n        constructor(login, email, name, age, gender) {\n            super(login, email);\n            this.name = name;\n            this.age = age;\n            this.gender = gender;\n        }\n\n        getDetails() {\n            return {name: this.name, age: this.age, gender: this.gender, email: this.email, login: this.login};\n        }\n  };\n  // \n  // Потім Створіть клас `Employee`, який розширює клас `Person` і містить наступні властивості:\n  //  - salary - зарплата співробітника;\n  //  - department - відділ, в якому працює співробітник.\n  // Крім того, клас `Employee` має мати метод `getEmployeeDetails()`, який повертає об'єкт з зарплатою співробітника та відділом, в якому він працює.\n\nclass Employee extends Person {\n    constructor(login, email, name, age, gender, salary, department) {\n        super(login, email, name, age, gender);\n        this.salary = salary;\n        this.department = department;\n    }\n    getEmployeeDetails() {\n        return {...this.getDetails(), salary: this.salary, department: this.department};\n    }\n};\n\nconst emp = new Employee(\"user123\", \"user@mail.com\", \"Anna\", 28, \"female\", 5000, \"Design\");\n\nconsole.log(emp.getEmployeeDetails());\n\n"],"names":["numbers","squareArray","array","el","data","concatArray","people","hasUnder18","numbersSecond","evenNumbers","numbersThird","oddNumber","numbersArray","sortedFoo","a","b","stringArray","sortedStringFoo","users","sortedObjFoo","adultArray","numbersForth","sumFoo","acc","Calculator","value","calc","result","Client","login","email","__privateAdd","_login","_email","__privateSet","__privateGet","newLogin","newEmail","Person","name","age","gender","Employee","salary","department","emp"],"mappings":"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"}