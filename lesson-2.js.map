{"version":3,"file":"lesson-2.js","sources":["../src/js/lesson-2.js"],"sourcesContent":["// Створіть масив styles з елементами 'jazz' і 'blues'\n// Додайте до кінця масиву елемент 'rock-n-roll' за допомогою відповідного методу масивів\n// Знайдіть елемент 'blues' у масиві та замініть його на 'classic', використовуючи JavaScript-код\n\n// Напишіть функцію logItems(array), яка приймає масив як аргумент\n// і виводить у консоль кожен його елемент у форматі:\n// \"<номер елемента> - <значення елемента>\".\n// Використайте цикл for для перебору елементів масиву.\n// Нумерація елементів повинна починатися з 1 (а не з 0).\n\nconst styles = ['jazz', 'blues'];\n\nstyles.push('rock-n-roll');\nstyles[styles.indexOf('blues')] = 'classic';\n\nconst logItems = array => {\n    for (const el of array) {\n        console.log(array.indexOf(el) + 1, el);\n    }\n}\n\nlogItems(styles);\n\n// Напишіть функцію checkLogin(array), яка:\n// Приймає масив логінів як аргумент.\n// Запитує ім'я користувача через prompt.\n// Перевіряє, чи є введене ім'я у переданому масиві.\n// Якщо ім'я є в масиві - виводить повідомлення через alert: \"Welcome, <name>!\"\n// Якщо ім'я відсутнє - виводить повідомлення: \"User not found\".\n\nconst logins = [\"Peter\", \"John\", \"Igor\", \"Sasha\"];\n\nconst checkLogin = array => {\n    const userName = prompt('Your name');\n    if (array.includes(userName)) {\n        alert(`Welcome, ${userName}`);\n    } else {\n        alert('User not found');\n    }\n}\n\ncheckLogin(logins);\n\n// Напишіть функцію caclculateAverage(),\n// яка приймає довільну кількість\n// аргументів і повертає їхнє середнє значення.\n// Додайте перевірку, що аргументи - це числа.\n\nfunction calculateAverage() {\n    const arg = [...arguments];\n    let sum = 0;\n    let count = 0;\n    for (const el of arg) {\n        if (typeof el === 'number') {\n            sum += el;\n            count += 1;\n        } \n    }\n    return Math.round((sum / count) * 100 / 100);\n}\n\nconsole.log(calculateAverage(2,999,435,678,123,9,0,667,4));\n\n\n// Напишіть функцію, яка сумуватиме сусідні числа \n// і пушитиме їх в новий масив.\n\nconst someArr = [22, 11, 34, 5, 12, 13, 14, 15];\n\n// уточнення: складати необхідно перше число з другим, потім друге - з третім, \n// третє - з четвертим і так до кінця.\n// В результаті функція має повертати масив [33, 45, 39, 17, 25, 27, 29].\n\nconst sumFoo = array => {\n    const newArr = [];\n    for (let i = 0; i <= array.length - 2; i++) {\n        newArr.push(array[i] + array[i + 1]);\n    };\n    return newArr;\n}\nconsole.log(sumFoo(someArr));\n\n\n// Напишіть функцію findSmallestNumber(numbers),\n// яка шукає найменше число в масиві.\n// Додайте перевірку, що функція отримує саме масив, і \n// якщо функція отримує масив - поверніть з функції найменше число,\n// в іншому випадку - поверніть 'Sory, it is not an array!'.\n\nconst numbers = [2, 5, 35, 56, 12, 24, 7, 80, 3];\nconst number = 2;\n\nconst findSmallestNumber = numbers => {\n    if (!Array.isArray(numbers)) {\n        return 'Sorry, it is not a array';\n    }\n    return Math.min(...numbers);\n}\n\nconsole.log(findSmallestNumber(numbers));\n\n// Напишіть функцію findLongestWord(string), яка \n// приймає довільний рядок, що складається лише зі слів, розділених\n// пробілами (параметр string), і повертатиме найдовше слово у реченні.\n\n// Скористайтесь цим прикладом виклику функції для перевірки її роботи:\n\n\nconst findLongestWord = string => {\n    const words = string.split(' ');\n    let longestWord = '';\n    for (const word of words) {\n        if (word.length > longestWord.length) {\n            longestWord = word;\n        }\n    }\n    return longestWord;\n}\n\nconsole.log(findLongestWord(\"London is the capital of Great Britain\")); // 'capital'\n\n// Напишіть скрипт, який для об'єкту user, послідовно:\n// 1 - додасть поле mood зі значенням 'happy',\n// 2 - замінить hobby на 'skydiving',\n// 3 - замінить значення premium на false,\n// 4 - виведе зміст об'єкта user у форматі\n// '<ключ>:<значення>' використовуя Object.keys() та for...of\n\nconst user = {\n    name: \"John\",\n    age: 20,\n    hobby: \"tenis\",\n    premium: true,\n  };\n\nuser.mood = 'happy';\nuser.hobby = 'skydiving';\nuser.premium = !user.premium;\n\nfor (const key of Object.keys(user)) {\n    console.log(key, user[key]);\n}\n\n\n// Є об'єкт, в якому зберігаються зарплати команди\n// Напишіть код для додавання усіх зарплат та\n// збережіть його результат в змінній sum.\n// Якщо об'єкт salaries пустий, то результат має бути 0\n\nconst salaries = {\n    Mango: 100,\n    Poly: 160,\n    Ajax: 1470,\n  };\n\nlet sum = 0;\nfor (const value of Object.values(salaries)) {\n    sum += value;\n}\n\nconsole.log(sum);\n\n\n// Створіть об'єкт calculator з наступними методами:\n// read(a, b) - приймає два аргумента і зберігає їх як властивості об'єкта,\n// sum() - повертає сумму збереженних значень (з перевіркою на наявність властивостей в об'єкті),\n// mult() - перемножає збереженні значення і повертає результат (з перевіркою на наявність властивостей в об'єкті),\n// винесіть перевірку на наявність властивостей в об'єкті в окремий метод exist().\n\n// Якщо вказані властивості в обʼєкті відсутні (тобто метод exist повертає false),\n// методи sum і mult мають повертати рядок 'No such propeties'\n\nconst calculator = {\n    read(a, b) {\n        this.a = a;\n        this.b = b;\n    },\n    sum() {\n        if(this.a && this.b) {\n            return this.a + this.b;\n        };\n        return 'No such propeties';\n    },\n    mult() {\n        if(this.a && this.b) {\n            return this.a * this.b;\n        };\n        return 'No such propeties';\n    },\n    exist() {\n        return this.a && this.b?true:false;\n    }\n}\n\ncalculator.read(5,10);\nconsole.log(calculator.sum());\nconsole.log(calculator.mult());\nconsole.log(calculator.exist()); \n\n\n// Напишіть функцію calcTotalPrice(fruits, fruitName),\n// яка приймає массив об'єктів (fruits) і рядок з назвою фрукта (fruitName).\n// Функція рахує і повертає загальну вартість фрукта\n// з таким ім'ям, ціною та кількістю з об'єкта.\n\n// Зверніть увагу, що в масиві може бути кілька обʼєктів з однаковою \n// назвою фрукта, це також треба урахувати.\n\nconst fruits = [\n    { name: \"Яблуко\", price: 45, quantity: 7 },\n    { name: \"Апельсин\", price: 60, quantity: 4 },\n    { name: \"Банан\", price: 125, quantity: 8 },\n    { name: \"Груша\", price: 350, quantity: 2 },\n    { name: \"Виноград\", price: 440, quantity: 3 },\n    { name: \"Банан\", price: 125, quantity: 3 },\n  ];\n\nconst calcTotalPrice = (fruits, fruitName) => {\n    const fruitFound = {\n        name,\n        price: 0,\n        quantity: 0,\n        totalPrice: 0,\n\n    };\n    for (const fruit of fruits) {\n        if (fruit.name === fruitName) {\n            fruitFound.totalPrice += fruit.price * fruit.quantity;\n            fruitFound.name = fruit.name;\n            fruitFound.price = fruit.price;\n            fruitFound.quantity += fruit.quantity;\n        }\n    };\n    return fruitFound;\n}\n\nconsole.table(calcTotalPrice(fruits, 'Банан'));\n\n"],"names":["styles","logItems","array","el","logins","checkLogin","userName","calculateAverage","arg","sum","count","someArr","sumFoo","newArr","i","numbers","findSmallestNumber","findLongestWord","string","words","longestWord","word","user","key","salaries","value","calculator","a","b","fruits","calcTotalPrice","fruitName","fruitFound","fruit"],"mappings":"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"}